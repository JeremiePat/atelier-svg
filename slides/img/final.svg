<svg viewBox="0 0 100 100"
  xmlns="http://www.w3.org/2000/svg"
  xmlns:xlink="http://www.w3.org/1999/xlink">

  <use xlink:href="grid.svg#grid" />

  <style>@import url(final.css);</style>
  <script xlink:href="final.js"></script>

  <defs>
    <path id="heartShape" d="M50,90 Q10,60 10,30 A20,20 0,0,1 50,30 A20,20 0,0,1 90,30 Q90,60 50,90 Z" />

    <clipPath id="breakLeft">
      <path d="m0,0 50,0 -2.5,5 5,10 -5,10 5,10 -5,10 5,10 -5,10 5,10 -5,10 5,10 -5,10 2.5,5 -50,0 z" />
    </clipPath>

    <clipPath id="breakRight">
      <path d="m100,0 -50,0 -2.5,5 5,10 -5,10 5,10 -5,10 5,10 -5,10 5,10 -5,10 5,10 -5,10 2.5,5 50,0z" />
    </clipPath>

    <radialGradient id="darkBackground">
      <stop offset="80%" stop-color="#333" />
      <stop offset="98%" stop-color="#000" />
    </radialGradient>

    <linearGradient id="shinny" gradientTransform="rotate(90)">
      <stop offset="5%"  stop-color="gold" />
      <stop offset="55%" stop-color="white" />
      <stop offset="95%" stop-color="gold" />
    </linearGradient>

    <filter id="darkGlow" x="-150%" y="-150%" width="400%" height="300%">
      <feDropShadow stdDeviation="0.3" dx="0" dy="0" flood-color="red" />
      <feDropShadow stdDeviation="1.0" dx="0" dy="0" flood-color="maroon" />
      <feDropShadow stdDeviation="1.5" dx="0" dy="0" flood-color="black" />
    </filter>

    <path id="txtPath" d="M90,50 A1,1 0,1,1 10,50 A1,1 0,1,1 90,50" />

    <g id="title" class="season">
      <circle cx="50" cy="50" r="35" />

      <text>
        <tspan x="51.5" y="45" >La météo</tspan>
        <tspan x="51" dy="0.85em">de l'amour</tspan>
      </text>
    </g>

    <g id="subTitle" class="season">
      <circle cx="50" cy="50" r="40" />

      <text>
        <textPath startOffset="50%" xlink:href="#txtPath">
          La météo de l'amour
        </textPath>
      </text>
    </g>
  </defs>

  <!--
    Notre système de rayon sera en arrière plan est on l'affichera
    à la demande à l'aide d'un système de class pour le paramétrer.
  -->
  <g id="rays">
    <defs>
      <rect id="ray" x="-100%" y="-100%" width="300%" height="300%" />

      <radialGradient id="greyScale">
        <stop offset="50%"  />
        <stop offset="100%" />
      </radialGradient>

      <mask id="fade">
        <rect width="100%" height="100%" fill="url(#greyScale)" />
      </mask>

      <mask id="triangle" >
        <rect x="-500%" y="-500%" width="1100%" height="1100%" fill="white" />

        <rect class="left"  width="1550%" height="2100%" x="-1500%" y="-1000%"/>
        <rect class="right" width="1550%" height="2100%" x="50%"   y="-1000%"/>
      </mask>
    </defs>

    <rect width="100%" height="100%" />

    <use xlink:href="#ray" />
    <use xlink:href="#ray" />
    <use xlink:href="#ray" />
    <use xlink:href="#ray" />
    <use xlink:href="#ray" />
    <use xlink:href="#ray" />
    <use xlink:href="#ray" />
    <use xlink:href="#ray" />
    <use xlink:href="#ray" />
    <use xlink:href="#ray" />
    <use xlink:href="#ray" />
    <use xlink:href="#ray" />
    <use xlink:href="#ray" />
    <use xlink:href="#ray" />
    <use xlink:href="#ray" />
  </g>

  <!--
    Ensuite on affiche notre tableau d'affichage.
    Selone l'état du jeu on afficher le premier ou
    le deuxièment élément <use>
  -->
  <g id="board">
    <use xlink:href="#title" />
    <use xlink:href="#subTitle" />
  </g>

  <!--
    Ici ce sont nos boutons qui permette de choisir un état
    JavaScript réappliquera les classes b1 à b5 à ces bouttons
    afin que leur affichage soit aléatoire.
  -->
  <g class="button sunny b1">
    <circle cx="10" cy="10" r="6" />
    <text x="10" y="12.8">1</text>
    <image x="6" y="6" width="8" xlink:href="cloud.svg#sunny" />
  </g>

  <g class="button mitigated b2">
    <circle cx="10" cy="10" r="6" />
    <text x="10" y="12.8">2</text>
    <image x="6" y="6" width="8" xlink:href="cloud.svg#mitigated" />
  </g>

  <g class="button cloudy b3">
    <circle cx="10" cy="10" r="6" />
    <text x="10" y="12.8">3</text>
    <image x="6" y="6" width="8" xlink:href="cloud.svg#cloudy" />
  </g>

  <g class="button rainy b4">
    <circle cx="10" cy="10" r="6" />
    <text x="10" y="12.8">4</text>
    <image x="6" y="6" width="8" xlink:href="cloud.svg#rainy" />
  </g>

  <g class="button stormy b5">
    <circle cx="10" cy="10" r="6" />
    <text x="10" y="12.8">5</text>
    <image x="6" y="6" width="8" xlink:href="cloud.svg#stormy" />
  </g>

  <!--
    Enfin le coeur qui battera à chque choix de l'utilisateur. Notez la
    transformation appliqué directement via la balise <g>. C'est une pratique
    assez commune en SVG quand on veux ajuster le positionnement d'un élément
    sans interférer avec une autre transformation qui lui serait appliqué (les
    transformations étant cumulatives, selon le référentiel qu'on souhaite
    utiliser il n'est pas rare d'imbriquer deux balises <g> pour garder le
    controle plus facilement).
  -->
  <g transform="translate(0 2)">
    <g id="heart">
      <use xlink:href="#heartShape" id="left" />
      <use xlink:href="#heartShape" id="right" />
    </g>
  </g>
</svg>
