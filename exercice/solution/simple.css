/*
  C'est une bonne pratique de toujours définir des valeurs par default pour
  les propriété personnalisé à la racine du DOM
*/
:root {
  --num-rays: 11;
  --color-1: white;
  --color-2: maroon;
  --fade: .6;
}

/* Quelques exemples de paramétrage alternatif */
#sky:target ~ #rays {
  --num-rays: 9;
  --color-1: hsl(180deg, 50%, 80%);
  --color-2: transparent;
  --fade: .75;
}

#nuke:target ~ #rays {
  --num-rays: 3;
  --color-1: black;
  --color-2: gold;
  --fade: 0;
}

#evil:target ~ #rays {
  --num-rays: 15;
  --color-1: red;
  --color-2: black;
  --fade: 1;
}


/* ------------------------------------------------------------------------- */
/*
  Le halo de transparence est en fait un dégradé de blanc vers transparent.
  Si vous vous souvenez bien, un pixel transparent est en fait un pixel
  noir. On aurais tout à fait pu créer un dégradé de couleur, mais c'est
  finalement plus facile de jouer s'ur l'opacité  pour obtenir le même effet

  Le même résultat avec des couleurs explicite aurait pu être réalisé avec
  ces deux règles CSS :
  #greyScale stop:nth-of-type(1) { stop-color: hsl(0, 0%, 100%); }
  #greyScale stop:nth-of-type(2) { stop-color: hsl(0, 0%, calc((1 - var(--fade, .8)) * 100%)); }
*/
#greyScale stop { stop-color: white; }
#greyScale stop:nth-of-type(2) { stop-opacity: calc(1 - var(--fade, .8)); }


/* ------------------------------------------------------------------------- */
/*
  Le rayon de référence qui sera réutilisé est un rectangle sur lequel on
  applique le masque #triangle.
*/
#ray {
  mask: url(#triangle);
}

/*
  On applique une rotation sur le rectangle droit du masque ce qui permettre
  d'obtenir des rayons avec le bon angle d'ouverture.
*/
#triangle .right {
  transform-origin: 50% 50%;
  transform: rotate(calc(var(--opening)));
}


/* ------------------------------------------------------------------------- */
/*
  Le conteneur des rayons définie l'angle d'ouverture des rayons. Il est
  aussi la cible du masque #fade, ce qui est plus simple à gérer que de
  l'appliquer sur chaque élement individuel.
*/
#rays {
  --opening: calc(180deg / var(--num-rays, 1));
  mask: url(#fade);
}

/* Propriétés communes à tous les rayons */
#rays use {
  --rotation: calc(2 * (var(--position, 1) - 1) * var(--opening) - var(--opening) / 2) ;

  fill: var(--color-1);

  transform-origin: 50% 50%;
  transform: rotate(var(--rotation));
}

/* Couleur du ciel */
#rays > rect {
  fill: var(--color-2, black);
}

/* Positionnement des chaque rayon individuel */
#rays use:nth-of-type(1) { --position: 1; }
#rays use:nth-of-type(2) { --position: 2; }
#rays use:nth-of-type(3) { --position: 3; }
#rays use:nth-of-type(4) { --position: 4; }
#rays use:nth-of-type(5) { --position: 5; }
#rays use:nth-of-type(6) { --position: 6; }
#rays use:nth-of-type(7) { --position: 7; }
#rays use:nth-of-type(8) { --position: 8; }
#rays use:nth-of-type(9) { --position: 9; }
#rays use:nth-of-type(10) { --position: 10; }
#rays use:nth-of-type(11) { --position: 11; }
#rays use:nth-of-type(12) { --position: 12; }
#rays use:nth-of-type(13) { --position: 13; }
#rays use:nth-of-type(14) { --position: 14; }
#rays use:nth-of-type(15) { --position: 15; }
